import type { NextPage } from 'next'
import { useEffect } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import { Octokit } from "@octokit/rest";
import moment from "moment";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";

import mockData from '../mock-data.json';
import styles from '../styles/Home.module.css'
import { median, movingStat } from '../src/utils/math';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Home: NextPage<{ stats: any }> = ({stats}) => {
  useEffect(() => {
    console.log(stats)
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <Line
        options={{
          responsive: true,
          plugins: {
            legend: {
              position: "top" as const,
            },
            title: {
              display: true,
              text: "Chart.js Bar Chart",
            },
          },
        }}
        data={{
          labels: Object.keys(stats),
          datasets: [
            {
              label: "avgSuccessTime",
              data: Object.keys(stats).map((key) => median(stats[key].avgSuccessTimes)),
            },
          ],
        }}
      />
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

const fectchRuns = async () => {
  const octokit = new Octokit({
    auth: process.env.GITHUB_TOKEN,
  });

  const workflows = await octokit.rest.actions.listRepoWorkflows({
    owner: process.env.GITHUB_ORG as string,
    repo: process.env.GITHUB_REPO as string,
  });

  const workflowId = workflows.data.workflows.find(
    (workflow) => workflow.name === process.env.GITHUB_WORKFLOW
  )?.id;

  return await octokit.paginate(octokit.actions.listWorkflowRuns, {
    owner: process.env.GITHUB_ORG as string,
    repo: process.env.GITHUB_REPO as string,
    workflow_id: workflowId as number,
    per_page: 100,
    event: "push",
  });
}

interface ObjectLiteral {
  [key: string]: any;
}

const sanitizeRuns = (runs: any) => {
  const statsPerDay: ObjectLiteral = {};

  runs.forEach((run) => {
    const day = moment(run.run_started_at).format("YYYY-MM-DD");
    if (!statsPerDay[day]) statsPerDay[day] = { runs: [], total: 0 };
    statsPerDay[day].runs.push(run);
  })

  Object.keys(statsPerDay).forEach((key) => {
    statsPerDay[key].total = statsPerDay[key].runs.length;

    statsPerDay[key].conclusion = {
      success: 0,
      failure: 0,
      cancelled: 0,
      startup_failure: 0,
    };
    statsPerDay[key].runs.forEach((run: any) => {
      statsPerDay[key].conclusion[run.conclusion] += 1;
    });

    statsPerDay[key].avgSuccessTimes = statsPerDay[key].runs.map((run: any) => {
      const createdAtTime = Date.parse(run.run_started_at);
      const updatedAtTime = Date.parse(run.updated_at);
      const durationMs = updatedAtTime - createdAtTime;
      return durationMs / 1000 / 60; // Minutes
    })
  });

  return statsPerDay
}

export const getStaticProps = async () => {
  const runs = process.env.USE_MOCK_DATA === "true" ? mockData : fectchRuns()

  const stats = sanitizeRuns(runs);

  return {
    props: {
      stats
    },
  }
}

export default Home
