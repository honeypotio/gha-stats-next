import type { NextPage } from 'next'
import { useEffect } from 'react';
import Head from 'next/head'
import { Octokit } from "@octokit/rest";
import moment from "moment";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";

import mockData from '../mock-data.json';
import styles from '../styles/Home.module.css'
import { average, median, movingStat } from '../src/utils/math';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Home: NextPage<{ stats: any, org: string, repo: string, workflow: string, branch: string }> = ({stats, org, repo, workflow, branch}) => {
  useEffect(() => {
    console.log(stats)
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          GitHub Actions statistics
        </h1>

        <p className={styles.description}>
          <code className={styles.code}>{org}/{repo}{' '}{workflow}@{branch}</code>
        </p>

        <Line
        options={{
          responsive: true,
          plugins: {
            legend: {
              position: "top" as const,
            },
            title: {
              display: true,
              text: "CI runtime (seconds)",
            },
          },
        }}
        data={{
          labels: Object.keys(stats),
          datasets: [
            {
              label: "Median",
              data: Object.keys(stats).map((key) => stats[key].medianSuccessTime),
              borderColor: "#2cfc03"
            },
            {
              label: "Average",
              data: Object.keys(stats).map((key) => stats[key].avgSuccessTime),
              borderColor: "#034efc"
            },
            {
              label: "7-day moving average",
              data: Object.keys(stats).map((key) => stats[key].movingByDayAvgSuccessTime.seven),
              borderColor: "#fcba03"
            },
            {
              label: "14-day moving average",
              data: Object.keys(stats).map((key) => stats[key].movingByDayAvgSuccessTime.fourteen),
              borderColor: "#face52"
            },
            {
              label: "7-day moving median",
              data: Object.keys(stats).map((key) => stats[key].movingByDayMedianSuccessTime.seven),
              borderColor: "#d34ff7"
            },
            {
              label: "14-day moving median",
              data: Object.keys(stats).map((key) => stats[key].movingByDayMedianSuccessTime.fourteen),
              borderColor: "#c603fc"
            },
          ],
        }}
      />
      </main>

      <footer className={styles.footer}>
        <a
          href="https://honeypot.io/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by Honeypot
        </a>
      </footer>
    </div>
  )
}

const fectchRuns = async () => {
  const octokit = new Octokit({
    auth: process.env.GITHUB_TOKEN,
  });

  const workflows = await octokit.rest.actions.listRepoWorkflows({
    owner: process.env.GITHUB_ORG as string,
    repo: process.env.GITHUB_REPO as string,
  });

  const workflowId = workflows.data.workflows.find(
    (workflow) => workflow.name === process.env.GITHUB_WORKFLOW
  )?.id;

  return await octokit.paginate(octokit.actions.listWorkflowRuns, {
    owner: process.env.GITHUB_ORG as string,
    repo: process.env.GITHUB_REPO as string,
    workflow_id: workflowId as number,
    per_page: 100,
    event: "push",
  });
}

interface ObjectLiteral {
  [key: string]: any;
}

const sanitizeRuns = (runs: any) => {
  const statsPerDay: ObjectLiteral = {};

  runs.forEach((run) => {
    const day = moment(run.run_started_at).format("YYYY-MM-DD");
    if (!statsPerDay[day]) statsPerDay[day] = { runs: [], total: 0 };
    statsPerDay[day].runs.push(run);
  })

  Object.keys(statsPerDay).forEach((key) => {
    statsPerDay[key].total = statsPerDay[key].runs.length;

    statsPerDay[key].conclusion = {
      success: 0,
      failure: 0,
      cancelled: 0,
      startup_failure: 0,
    };
    statsPerDay[key].runs.forEach((run: any) => {
      statsPerDay[key].conclusion[run.conclusion] += 1;
    });

    statsPerDay[key].successTimes = statsPerDay[key].runs.map((run: any) => {
      const createdAtTime = Date.parse(run.run_started_at);
      const updatedAtTime = Date.parse(run.updated_at);
      const durationMs = updatedAtTime - createdAtTime;
      return durationMs / 1000;
    })
  });

  return statsPerDay
}

const addCalculatedStats = (stats) => {
  Object.keys(stats).forEach((key) => {
    stats[key].avgSuccessTime = average(stats[key].successTimes)
    stats[key].medianSuccessTime = median(stats[key].successTimes)
  })

  // These are not perfect as the moving stat is calculated based on the avg/median of the day
  // It should rather take each value of the day, but because days have different count of values, keeping track of moving avg/median becomes complicated
  const movingByDayAvgSuccessTime = {
    seven: movingStat(Object.keys(stats).map((key) => stats[key].avgSuccessTime), 7, 0, average),
    fourteen: movingStat(Object.keys(stats).map((key) => stats[key].avgSuccessTime), 14, 0, average)
  }
  const movingByDayMedianSuccessTime = {
    seven: movingStat(Object.keys(stats).map((key) => stats[key].medianSuccessTime), 7, 0, median),
    fourteen: movingStat(Object.keys(stats).map((key) => stats[key].medianSuccessTime), 14, 0, median)
  }
  let index = 0;

  Object.keys(stats).forEach((key) => {
    stats[key].movingByDayAvgSuccessTime = {
      seven: movingByDayAvgSuccessTime.seven[index],
      fourteen: movingByDayAvgSuccessTime.fourteen[index]
    }
    stats[key].movingByDayMedianSuccessTime = {
      seven: movingByDayMedianSuccessTime.seven[index],
      fourteen: movingByDayMedianSuccessTime.fourteen[index]
    }
    index++;
  })

  return stats
}

export const getStaticProps = async () => {
  const runs = process.env.USE_MOCK_DATA === "true" ? mockData : fectchRuns()

  const stats = addCalculatedStats(sanitizeRuns(runs));

  return {
    props: {
      stats,
      org: process.env.GITHUB_ORG,
      repo: process.env.GITHUB_REPO,
      workflow: process.env.GITHUB_WORKFLOW,
      branch: process.env.GITHUB_BRANCH,
    },
  }
}

export default Home
