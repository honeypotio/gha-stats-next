import type { NextPage } from "next";
import { useEffect } from "react";
import Head from "next/head";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";

import styles from "../styles/Home.module.css";
import {
  groupByDay,
  addCalculatedStats,
  removeRawRuns,
  addCalculatedSuccessRateStats,
} from "../src/utils/stats";
import { fectchRuns } from "../src/utils/github";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Home: NextPage<{
  stats: any;
  successStats: any;
  org: string;
  repo: string;
  workflow: string;
  branch: string;
}> = ({ stats, successStats, org, repo, workflow, branch }) => {
  useEffect(() => {
    console.log(successStats);
  });
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>GitHub Actions statistics</h1>

        <p className={styles.description}>
          <code className={styles.code}>
            {org}/{repo} {workflow}@{branch}
          </code>
        </p>

        <p className={styles.description}>CI success rate (%)</p>

        <Line
          options={{
            responsive: true,
            plugins: {
              legend: {
                position: "top" as const,
              },
              title: {
                display: true,
              },
            },
          }}
          data={{
            labels: Object.keys(successStats).sort(),
            datasets: [
              {
                label: "Daily success rate",
                data: Object.keys(successStats)
                  .sort()
                  .map((key) => successStats[key].successRate),
                borderColor: "#c9e3c5",
              },
              {
                label: "7-day moving success rate",
                data: Object.keys(successStats)
                  .sort()
                  .map((key) => successStats[key].movingByDaySuccessRate.seven),
                borderColor: "#33a122",
              },
            ],
          }}
        />

        <p className={styles.description}>CI runtime (seconds)</p>

        <Line
          options={{
            responsive: true,
            plugins: {
              legend: {
                position: "top" as const,
              },
              title: {
                display: true,
              },
            },
          }}
          data={{
            labels: Object.keys(stats).sort(),
            datasets: [
              {
                label: "Median",
                data: Object.keys(stats)
                  .sort()
                  .map((key) => stats[key].medianSuccessTime),
                borderColor: "#2cfc03",
              },
              {
                label: "Average",
                data: Object.keys(stats)
                  .sort()
                  .map((key) => stats[key].avgSuccessTime),
                borderColor: "#034efc",
              },
              {
                label: "7-day moving average",
                data: Object.keys(stats)
                  .sort()
                  .map((key) => stats[key].movingByDayAvgSuccessTime.seven),
                borderColor: "#fcba03",
              },
              {
                label: "14-day moving average",
                data: Object.keys(stats)
                  .sort()
                  .map((key) => stats[key].movingByDayAvgSuccessTime.fourteen),
                borderColor: "#face52",
              },
              {
                label: "7-day moving median",
                data: Object.keys(stats)
                  .sort()
                  .map((key) => stats[key].movingByDayMedianSuccessTime.seven),
                borderColor: "#d34ff7",
              },
              {
                label: "14-day moving median",
                data: Object.keys(stats)
                  .sort()
                  .map(
                    (key) => stats[key].movingByDayMedianSuccessTime.fourteen
                  ),
                borderColor: "#c603fc",
              },
            ],
          }}
        />
      </main>

      <footer className={styles.footer}>
        <a
          href="https://honeypot.io/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by Honeypot
        </a>
      </footer>
    </div>
  );
};

const loadMockData = async () => {
  // Note that everything within data is loaded: https://stackoverflow.com/a/47956054/2771889
  const data = await import(`../data/${process.env.MOCK_DATA}`);
  return Array.from(data);
};

type Runs = ExtractPromiseType<ReturnType<typeof fectchRuns>>;

export const getStaticProps = async () => {
  const runs =
    process.env.USE_MOCK_DATA === "true"
      ? ((await loadMockData()) as Runs)
      : await fectchRuns();

  const sanitizedStats = groupByDay(runs);

  const successStats = removeRawRuns(
    addCalculatedSuccessRateStats(sanitizedStats)
  );

  const stats = removeRawRuns(addCalculatedStats(groupByDay(runs)));

  return {
    props: {
      stats,
      successStats,
      org: process.env.REPO_ORG,
      repo: process.env.REPO_NAME,
      workflow: process.env.REPO_WORKFLOW,
      branch: process.env.REPO_BRANCH,
    },
  };
};

export default Home;
